// This file demonstrates how to use the SwagDoc libraries programmatically.
// In a real application, you would import the packages from your module system.
// For this example, we'll describe the usage but not include actual imports.

package main

import (
	"fmt"
)

/*
This example demonstrates how to use the SwagDoc library programmatically.

To use this in a real application, you would import:
  "github.com/parnexcodes/swag-doc/pkg/openapi"
  "github.com/parnexcodes/swag-doc/pkg/proxy"

And then use the packages as shown in the code below.
*/

func main() {
	fmt.Println("SwagDoc Programmatic Usage Example")
	fmt.Println("===================================")
	fmt.Println()
	fmt.Println("This is an example demonstrating how to use SwagDoc programmatically.")
	fmt.Println("In your actual code, you would import the required packages and")
	fmt.Println("use them as shown in the sample code in this file.")
	fmt.Println()
	fmt.Println("Steps to use SwagDoc programmatically:")
	fmt.Println("1. Create a storage implementation (e.g., FileStorage)")
	fmt.Println("2. To run a proxy: Create an interceptor and a proxy server")
	fmt.Println("3. To generate docs: Create a generator with your storage and configuration")
	fmt.Println()
	fmt.Println("See the source code of this file for implementation details.")
}

/*
Example code for running a proxy:

func runProxy(storage proxy.Storage) {
	// Configuration
	port := 8080
	targetURL := "http://localhost:3000"

	fmt.Printf("Starting proxy server on port %d targeting %s\n", port, targetURL)

	// Create interceptor function
	interceptor := proxy.TransactionInterceptor(storage)

	// Create and start proxy server
	server, err := proxy.NewProxyServer(port, targetURL, interceptor)
	if err != nil {
		log.Fatalf("Failed to create proxy server: %v", err)
	}

	if err := server.Start(); err != nil {
		log.Fatalf("Proxy server error: %v", err)
	}
}
*/

/*
Example code for generating documentation:

func generateDocs(storage proxy.Storage, outputFile string) {
	fmt.Printf("Generating Swagger documentation to %s\n", outputFile)

	// Configuration
	title := "Example API"
	description := "API documentation generated by SwagDoc"
	version := "1.0.0"
	basePath := "http://localhost:3000"

	// Create absolute path for output file
	absOutput, err := filepath.Abs(outputFile)
	if err != nil {
		log.Fatalf("Failed to get absolute path for output file: %v", err)
	}

	// Create OpenAPI generator
	generator := openapi.NewGenerator(storage, title, description, version, basePath)

	// Generate OpenAPI documentation
	if err := generator.Generate(absOutput); err != nil {
		log.Fatalf("Failed to generate documentation: %v", err)
	}

	fmt.Printf("Swagger documentation generated successfully: %s\n", absOutput)
}
*/

// Example usage:
// To start the proxy:
//   go run main.go proxy
//
// To generate documentation:
//   go run main.go generate
